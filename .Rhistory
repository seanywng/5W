"m_mayores_de_19")
# renamed
names(act1) <- act_names
glimpse(act1)
# function to remove accents
rm_accent <- function(colns){
colns <- stri_trans_general(colns, "Latin-ASCII")
}
# removing accents
# and str_to_upper() since R is case-sensitive
act1 <- act1 %>%
mutate(estado    = rm_accent(str_to_upper(estado)),
municipio = rm_accent(str_to_upper(municipio)),
parroquia = rm_accent(str_to_upper(parroquia)),
ubicacion = rm_accent(str_to_upper(ubicacion)),
actividad_desc = rm_accent(str_to_upper(actividad_desc)))
# recoding
act1 <- act1 %>%
mutate(recurrente_beneficiarios =
recode(recurrente_beneficiarios,
"no" = FALSE, "No" = FALSE, "Si" = TRUE, "si" = TRUE, "sí" = TRUE, "Sí" = TRUE),
act_covid = recode(act_covid,
"no" = FALSE, "No" = FALSE, "Si" = TRUE, "si" = TRUE, "sí" = TRUE, "Sí" = TRUE)) %>%
replace_na(list(recurrente_beneficiarios = FALSE, act_covid = FALSE))
# recoding estatus_actividad
act1$estatus_actividad <- act1$estatus_actividad %>%
str_replace_all(c("En ejecucion" = "ejecucion",
"en ejecución" = "ejecucion",
"en Ejecución" = "ejecucion",
"En ejecución" = "ejecucion",
"En Ejecución" = "ejecucion",
"finalizada" = "finalizada",
"Finalizada" = "finalizada"))
# create a new variable of last day of month only
act1$mes_solo <- ceiling_date(act1$mes_reportado, "month") - days(1)
locations <- read_csv("locations.csv") %>%
mutate(estado    = rm_accent(str_to_upper(estado)), # just to make sure
municipio = rm_accent(str_to_upper(municipio)),
parroquia = rm_accent(str_to_upper(parroquia)),
ubicacion = rm_accent(str_to_upper(ubicacion)))
# see if you need to update locations
# new locations not in locations.csv will be caught by the anti-join()
locations_add <- act1 %>%
select(estado, pcode1, municipio, pcode2, parroquia, pcode3, ubicacion,
latitud, longitud) %>%
distinct() %>%
anti_join(locations, by = "ubicacion")
# splitting into two datasets, one clean one dirty.
adm_dirty <- act1 %>%
filter(is.na(estado) | is.na(pcode1) |
is.na(municipio) | is.na(pcode2) |
is.na(parroquia) | is.na(pcode3))
adm_clean <- act1 %>%
filter(!is.na(estado) & !is.na(pcode1) &
!is.na(municipio) & !is.na(pcode2) &
!is.na(parroquia) & !is.na(pcode3))
# filling in missing values
adm_dirty <- adm_dirty %>%
left_join(locations, by = "ubicacion") %>%
mutate(estado    = coalesce(estado.x, estado.y),
pcode1    = coalesce(pcode1.x, pcode1.y),
municipio = coalesce(municipio.x, municipio.y),
pcode2    = coalesce(pcode2.x, pcode2.y),
parroquia = coalesce(parroquia.x, parroquia.y),
pcode3    = coalesce(pcode3.x, pcode3.y)) %>%
select(-estado.x, -estado.y, -pcode1.x, -pcode1.y,
-municipio.x, -municipio.y, -pcode2.x, -pcode2.y,
-parroquia.x, -parroquia.y, -pcode3.x, -pcode3.y) %>%
distinct() # removing duplicate rows from the join
# bind_rows() does not care about column sequence
# but put adm_clean first so that the original order is preserved
act2 <- bind_rows(adm_clean, adm_dirty)
# error checking
rbind(sum(act1$total_beneficiarios, na.rm = TRUE),
sum(act2$total_beneficiarios, na.rm = TRUE),
nrow(act1),
nrow(act2))
# mutating bencheck and unspecified beneficiaries columns
act2 <- act2 %>%
mutate(total_ben_check = select(., m_0_3:m_mayores_de_19) %>%  rowSums(na.rm = TRUE),
no_esp_ben      = round(total_beneficiarios) - round(total_ben_check))
# printing the bencheck
# the round is necessary due to floating point arithmetic as some values are
# close enough to 0 to be ignored by us but not by R.
# only pander() if you want to read the html
no_esp <- act2 %>%
filter(round(total_beneficiarios) != round(total_ben_check)) %>%
select(organizacion_implementadora, actividad_desc,
ubicacion, total_ben_check, total_beneficiarios, no_esp_ben)
kable(no_esp, caption = "Undisaggregated beneficiaries") %>%
kable_styling(bootstrap_options = "bordered", font_size = 12)
# timestamp for all the files to be written below
now <- Sys.time()
# pivoting longer and creating new dataframe
u_ben <- act2 %>%
select(-t_f_ben, -total_ben_check) %>% # remember to drop them
relocate(mes_solo) %>% # moves mes_solo to the first variable
pivot_longer(m_0_3:no_esp_ben,
names_to = "desagregacion", values_to = "beneficiarios") %>%
filter(recurrente_beneficiarios == FALSE) %>%
filter(beneficiarios != 0) %>% # empty cells are 0 in the 5W table
group_by(ubicacion, desagregacion) %>%
slice(which.max(beneficiarios)) %>%
ungroup() %>%
select(mes_solo, estado, pcode1, municipio, pcode2,parroquia, pcode3,
ubicacion, latitud, longitud,
desagregacion, beneficiarios)
# This is the dataset for beneficiaries
act_ben <- act2 %>%
select(-t_f_ben, -total_ben_check) %>% # remember to drop them
relocate(mes_solo) %>% # moves mes_solo to the first variable
filter(recurrente_beneficiarios == FALSE) %>%
pivot_longer(m_0_3:no_esp_ben,
names_to = "desagregacion", values_to = "beneficiarios") %>%
filter(beneficiarios != 0) %>% # empty cells are 0 in the 5W table
group_by(ubicacion, desagregacion) %>%
select(mes_solo, nombre_del_proyecto, organizacion_implementadora,
estado, pcode1, municipio, pcode2, parroquia, pcode3,
ubicacion, latitud, longitud,
actividad_codigo, actividad_desc, act_covid,
desagregacion, beneficiarios)
rbind(sum(u_ben$beneficiarios),
sum(act_ben$beneficiarios),
sum(u_ben$beneficiarios) - sum(act_ben$beneficiarios))
# read in census reference dataset
cen_ref <- read_excel("census_data_20191122.xlsx", sheet = "data") %>%
clean_names() %>%
select(estado, pcode1, municipio, pcode2, parroquia, pcode3, field_office,
poblacion_total_2011, x_2019_poblacion_parroquial_total,
ham_2019_ambitos_ge, ham_2019_xx_pobreza_env_por_parroquia,
ham_2019_xx_poblacion_pobre_por_parroquia,
poblacion_infantil_menor_de_12_anos, poblacion_adolescentes_de_12_a_17_anos,
poblacion_de_18_anos_y_mas,
poblacion_urbana_percent, area_km2, densidad_poblacional_ppl_km2,
matricula_2017_educacion_inicial, matricula_2017_educacion_primaria,
matricula_2017_educacion_media)
# filtering out PROMOCION MENSAJES CLAVES PARA LA COMUNIDAD ESCOLAR
CA105 <- act_ben %>% filter(actividad_codigo == "CA1.05")
# creating datasets without CA1.05 and
# for act_ben, recoding UNICEF and mutating short activity descriptions
act_ben2 <- act_ben %>%
filter(actividad_codigo != "CA1.05") %>%
mutate(organizacion_implementadora =
str_replace_all(organizacion_implementadora,
"UNICEF - Fondo de las Naciones Unidas para la Infancia",
"UNICEF")) %>%
mutate(actividad_short = recode(actividad_codigo,
CA1.01 = "1.01_reinsercion educativa",
CA1.02 = "1.02_nivelacion y capacitacion",
CA1.03 = "1.03_kits escolares",
CA1.04 = "1.04_alimentacion escolar",
CA1.05 = "1.05_promocion mensajes claves",
CA1.06 = "1.06_apoyo psicoeducativo",
CA1.07 = "1.07_actividades recreativas",
CA2.08 = "2.08_educacion a distancia",
CA2.09 = "2.09_formacion docentes",
CA2.10 = "2.10_becas docentes"))
u_ben2 <- u_ben %>% filter(!str_detect(.$ubicacion, "^RADIO"))
# as a note, i don't think you can put an str_detect inside a summarise
act_ben2 %>%
mutate(sex_ben = ifelse(str_detect(desagregacion, "^m"), "male",
ifelse(str_detect(desagregacion, "^f"), "female", "no_esp"))) %>%
mutate(actividad = actividad_desc) %>%
group_by(actividad) %>%
summarise(total = sum(beneficiarios, na.rm = TRUE),
male = sum((beneficiarios[sex_ben == "male"])),
female = sum((beneficiarios[sex_ben == "female"])),
sex_ratio = round((male/female), digits = 2)) %>%
mutate(percent_of_total = round((total / sum(total) * 100), digits = 2)) %>%
relocate(percent_of_total, .after = total) %>%
arrange(desc(total)) %>%
pander(big.mark = ",", style = "rmarkdown")
# to reorder the plot
ordvec <- c("0-3", "3-6", "7-12", "12-17", "18-19", "mayor_que_19")
# df for the plot
age_u_ben <- u_ben2 %>% # important to use u_ben here
mutate(age_ben = case_when(
str_detect(desagregacion,"0_3$") ~ "0-3",
str_detect(desagregacion,"3_6$") ~ "3-6",
str_detect(desagregacion, "7_12$") ~ "7-12",
str_detect(desagregacion, "12_17$") ~ "12-17",
str_detect(desagregacion, "18_19$") ~ "18-19",
str_detect(desagregacion, "mayores_de_19$") ~ "mayor_que_19",
TRUE ~ "no_esp")) %>%
filter(age_ben != "no_esp") %>%
group_by(age_ben) %>%
summarise(beneficiarios = sum(beneficiarios))
ggplot(data = age_u_ben, aes(x = fct_reorder(age_ben, ordvec), y = beneficiarios)) +
geom_col(fill = "cornflowerblue") +
geom_text(aes(label = scales::comma(beneficiarios)), vjust = -0.25, size = 4) +
scale_y_continuous(labels = unit_format(unit = "K", scale = 1e-3, sep = "")) +
xlab("Age groups") + ylab("Beneficiaries") +
theme(axis.text = element_text(size = 10))
# reference df for the table and text below, restructuring enrollment data from cen_ref
matric_ben <- cen_ref %>%
select(matricula_2017_educacion_inicial, matricula_2017_educacion_primaria,
matricula_2017_educacion_media) %>%
rename("3-6" = matricula_2017_educacion_inicial,
"7-12" = matricula_2017_educacion_primaria,
"12-17" = matricula_2017_educacion_media) %>%
pivot_longer(everything(), names_to = "age_ben", values_to = "matricula2017",
values_drop_na = TRUE) %>%
group_by(age_ben) %>%
summarise(enrolment2017 = sum(matricula2017)) %>%
left_join(age_u_ben) %>%
mutate(percent_total = beneficiarios/enrolment2017 * 100) %>%
relocate(beneficiarios, .after = age_ben) %>%
rename(`Age group` = age_ben,
beneficiaries = beneficiarios) %>%
slice(2,3,1)  # rearranging rows
sum(matric_ben$beneficiarios)/(sum(matric_ben$matricula2017))*100)
sum(matric_ben$beneficiarios)/(sum(matric_ben$matricula2017))*100
sum(matric_ben$beneficiaries)/(sum(matric_ben$matricula2017))*100
sum(matric_ben$beneficiaries)/(sum(matric_ben$enrolment2017))*100
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.width = 9.5)
library(tidyverse)
library(lubridate)
library(stringr)
library(stringi)
library(pander)
library(scales)
library(forcats)
library(janitor)
library(readxl)
library(ggmap)
library(sf)
library(patchwork)
library(maptools)
library(ggforce)
library(ggthemes)
library(plotly)
library(kableExtra)
library(DT)
library(tinytex)
# tables all in one row
panderOptions('table.split.table', Inf)
# thousands separator
panderOptions("big.mark", ",")
# specifying column types
act_col_types <- c("date", "date", "text", "text","text","text",
"text","text","text","text","text","text","text",
"numeric", "numeric", "text","text","text",
"text","text","text", "numeric", "text",
"date", "date", "text", "numeric", "numeric",
"logical", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric")
# you're gonna have to live with the error messages,
# since you can't slice before read_excel() argument
act1<- read_excel("database activities 5W.xlsx",
sheet = "data",
skip = 1,
col_types = act_col_types) %>%
clean_names() %>%
remove_empty() %>%
slice(-c(1)) %>% # removes the second row
slice(-c(12055)) # removes the grand total
act_names <- c("fecha_reportado_cluster",
"mes_reportado",
"codigo_de_proyecto",
"nombre_del_proyecto",
"organizacion_lider",
"organizacion_implementadora",
"estado",
"pcode1",
"municipio",
"pcode2",
"parroquia",
"pcode3",
"ubicacion",
"latitud",
"longitud",
"actividad_full",
"actividad_codigo",
"actividad_desc",
"actividad_codigo_desc",
"act_covid",
"unidad",
"cantidad_del_mes",
"recurrente_beneficiarios",
"fecha_de_inicio",
"fecha_prevista_finalizacion",
"estatus_actividad",
"total_beneficiarios",
"check_beneficiaries",
"t_f_ben",
"percent_poblacion_indigena",
"percent_personas_con_discapacidad",
"m_0_3",
"m_3_6",
"m_7_12",
"m_12_17",
"m_18_19",
"f_0_3",
"f_3_6",
"f_7_12",
"f_12_17",
"f_18_19",
"f_mayores_de_19",
"m_mayores_de_19")
# renamed
names(act1) <- act_names
glimpse(act1)
# function to remove accents
rm_accent <- function(colns){
colns <- stri_trans_general(colns, "Latin-ASCII")
}
# removing accents
# and str_to_upper() since R is case-sensitive
act1 <- act1 %>%
mutate(estado    = rm_accent(str_to_upper(estado)),
municipio = rm_accent(str_to_upper(municipio)),
parroquia = rm_accent(str_to_upper(parroquia)),
ubicacion = rm_accent(str_to_upper(ubicacion)),
actividad_desc = rm_accent(str_to_upper(actividad_desc)))
# recoding
act1 <- act1 %>%
mutate(recurrente_beneficiarios =
recode(recurrente_beneficiarios,
"no" = FALSE, "No" = FALSE, "Si" = TRUE, "si" = TRUE, "sí" = TRUE, "Sí" = TRUE),
act_covid = recode(act_covid,
"no" = FALSE, "No" = FALSE, "Si" = TRUE, "si" = TRUE, "sí" = TRUE, "Sí" = TRUE)) %>%
replace_na(list(recurrente_beneficiarios = FALSE, act_covid = FALSE))
# recoding estatus_actividad
act1$estatus_actividad <- act1$estatus_actividad %>%
str_replace_all(c("En ejecucion" = "ejecucion",
"en ejecución" = "ejecucion",
"en Ejecución" = "ejecucion",
"En ejecución" = "ejecucion",
"En Ejecución" = "ejecucion",
"finalizada" = "finalizada",
"Finalizada" = "finalizada"))
# create a new variable of last day of month only
act1$mes_solo <- ceiling_date(act1$mes_reportado, "month") - days(1)
locations <- read_csv("locations.csv") %>%
mutate(estado    = rm_accent(str_to_upper(estado)), # just to make sure
municipio = rm_accent(str_to_upper(municipio)),
parroquia = rm_accent(str_to_upper(parroquia)),
ubicacion = rm_accent(str_to_upper(ubicacion)))
# see if you need to update locations
# new locations not in locations.csv will be caught by the anti-join()
locations_add <- act1 %>%
select(estado, pcode1, municipio, pcode2, parroquia, pcode3, ubicacion,
latitud, longitud) %>%
distinct() %>%
anti_join(locations, by = "ubicacion")
# splitting into two datasets, one clean one dirty.
adm_dirty <- act1 %>%
filter(is.na(estado) | is.na(pcode1) |
is.na(municipio) | is.na(pcode2) |
is.na(parroquia) | is.na(pcode3))
adm_clean <- act1 %>%
filter(!is.na(estado) & !is.na(pcode1) &
!is.na(municipio) & !is.na(pcode2) &
!is.na(parroquia) & !is.na(pcode3))
# filling in missing values
adm_dirty <- adm_dirty %>%
left_join(locations, by = "ubicacion") %>%
mutate(estado    = coalesce(estado.x, estado.y),
pcode1    = coalesce(pcode1.x, pcode1.y),
municipio = coalesce(municipio.x, municipio.y),
pcode2    = coalesce(pcode2.x, pcode2.y),
parroquia = coalesce(parroquia.x, parroquia.y),
pcode3    = coalesce(pcode3.x, pcode3.y)) %>%
select(-estado.x, -estado.y, -pcode1.x, -pcode1.y,
-municipio.x, -municipio.y, -pcode2.x, -pcode2.y,
-parroquia.x, -parroquia.y, -pcode3.x, -pcode3.y) %>%
distinct() # removing duplicate rows from the join
# bind_rows() does not care about column sequence
# but put adm_clean first so that the original order is preserved
act2 <- bind_rows(adm_clean, adm_dirty)
# error checking
rbind(sum(act1$total_beneficiarios, na.rm = TRUE),
sum(act2$total_beneficiarios, na.rm = TRUE),
nrow(act1),
nrow(act2))
# mutating bencheck and unspecified beneficiaries columns
act2 <- act2 %>%
mutate(total_ben_check = select(., m_0_3:m_mayores_de_19) %>%  rowSums(na.rm = TRUE),
no_esp_ben      = round(total_beneficiarios) - round(total_ben_check))
# printing the bencheck
# the round is necessary due to floating point arithmetic as some values are
# close enough to 0 to be ignored by us but not by R.
# only pander() if you want to read the html
no_esp <- act2 %>%
filter(round(total_beneficiarios) != round(total_ben_check)) %>%
select(organizacion_implementadora, actividad_desc,
ubicacion, total_ben_check, total_beneficiarios, no_esp_ben)
kable(no_esp, caption = "Undisaggregated beneficiaries") %>%
kable_styling(bootstrap_options = "bordered", font_size = 12)
# timestamp for all the files to be written below
now <- Sys.time()
# pivoting longer and creating new dataframe
u_ben <- act2 %>%
select(-t_f_ben, -total_ben_check) %>% # remember to drop them
relocate(mes_solo) %>% # moves mes_solo to the first variable
pivot_longer(m_0_3:no_esp_ben,
names_to = "desagregacion", values_to = "beneficiarios") %>%
filter(recurrente_beneficiarios == FALSE) %>%
filter(beneficiarios != 0) %>% # empty cells are 0 in the 5W table
group_by(ubicacion, desagregacion) %>%
slice(which.max(beneficiarios)) %>%
ungroup() %>%
select(mes_solo, estado, pcode1, municipio, pcode2,parroquia, pcode3,
ubicacion, latitud, longitud,
desagregacion, beneficiarios)
# This is the dataset for beneficiaries
act_ben <- act2 %>%
select(-t_f_ben, -total_ben_check) %>% # remember to drop them
relocate(mes_solo) %>% # moves mes_solo to the first variable
filter(recurrente_beneficiarios == FALSE) %>%
pivot_longer(m_0_3:no_esp_ben,
names_to = "desagregacion", values_to = "beneficiarios") %>%
filter(beneficiarios != 0) %>% # empty cells are 0 in the 5W table
group_by(ubicacion, desagregacion) %>%
select(mes_solo, nombre_del_proyecto, organizacion_implementadora,
estado, pcode1, municipio, pcode2, parroquia, pcode3,
ubicacion, latitud, longitud,
actividad_codigo, actividad_desc, act_covid,
desagregacion, beneficiarios)
rbind(sum(u_ben$beneficiarios),
sum(act_ben$beneficiarios),
sum(u_ben$beneficiarios) - sum(act_ben$beneficiarios))
# read in census reference dataset
cen_ref <- read_excel("census_data_20191122.xlsx", sheet = "data") %>%
clean_names() %>%
select(estado, pcode1, municipio, pcode2, parroquia, pcode3, field_office,
poblacion_total_2011, x_2019_poblacion_parroquial_total,
ham_2019_ambitos_ge, ham_2019_xx_pobreza_env_por_parroquia,
ham_2019_xx_poblacion_pobre_por_parroquia,
poblacion_infantil_menor_de_12_anos, poblacion_adolescentes_de_12_a_17_anos,
poblacion_de_18_anos_y_mas,
poblacion_urbana_percent, area_km2, densidad_poblacional_ppl_km2,
matricula_2017_educacion_inicial, matricula_2017_educacion_primaria,
matricula_2017_educacion_media)
# filtering out PROMOCION MENSAJES CLAVES PARA LA COMUNIDAD ESCOLAR
CA105 <- act_ben %>% filter(actividad_codigo == "CA1.05")
# creating datasets without CA1.05 and
# for act_ben, recoding UNICEF and mutating short activity descriptions
act_ben2 <- act_ben %>%
filter(actividad_codigo != "CA1.05") %>%
mutate(organizacion_implementadora =
str_replace_all(organizacion_implementadora,
"UNICEF - Fondo de las Naciones Unidas para la Infancia",
"UNICEF")) %>%
mutate(actividad_short = recode(actividad_codigo,
CA1.01 = "1.01_reinsercion educativa",
CA1.02 = "1.02_nivelacion y capacitacion",
CA1.03 = "1.03_kits escolares",
CA1.04 = "1.04_alimentacion escolar",
CA1.05 = "1.05_promocion mensajes claves",
CA1.06 = "1.06_apoyo psicoeducativo",
CA1.07 = "1.07_actividades recreativas",
CA2.08 = "2.08_educacion a distancia",
CA2.09 = "2.09_formacion docentes",
CA2.10 = "2.10_becas docentes"))
u_ben2 <- u_ben %>% filter(!str_detect(.$ubicacion, "^RADIO"))
# as a note, i don't think you can put an str_detect inside a summarise
act_ben2 %>%
mutate(sex_ben = ifelse(str_detect(desagregacion, "^m"), "male",
ifelse(str_detect(desagregacion, "^f"), "female", "no_esp"))) %>%
mutate(actividad = actividad_desc) %>%
group_by(actividad) %>%
summarise(total = sum(beneficiarios, na.rm = TRUE),
male = sum((beneficiarios[sex_ben == "male"])),
female = sum((beneficiarios[sex_ben == "female"])),
sex_ratio = round((male/female), digits = 2)) %>%
mutate(percent_of_total = round((total / sum(total) * 100), digits = 2)) %>%
relocate(percent_of_total, .after = total) %>%
arrange(desc(total)) %>%
pander(big.mark = ",", style = "rmarkdown")
# to reorder the plot
ordvec <- c("0-3", "3-6", "7-12", "12-17", "18-19", "mayor_que_19")
# df for the plot
age_u_ben <- u_ben2 %>% # important to use u_ben here
mutate(age_ben = case_when(
str_detect(desagregacion,"0_3$") ~ "0-3",
str_detect(desagregacion,"3_6$") ~ "3-6",
str_detect(desagregacion, "7_12$") ~ "7-12",
str_detect(desagregacion, "12_17$") ~ "12-17",
str_detect(desagregacion, "18_19$") ~ "18-19",
str_detect(desagregacion, "mayores_de_19$") ~ "mayor_que_19",
TRUE ~ "no_esp")) %>%
filter(age_ben != "no_esp") %>%
group_by(age_ben) %>%
summarise(beneficiarios = sum(beneficiarios))
ggplot(data = age_u_ben, aes(x = fct_reorder(age_ben, ordvec), y = beneficiarios)) +
geom_col(fill = "cornflowerblue") +
geom_text(aes(label = scales::comma(beneficiarios)), vjust = -0.25, size = 4) +
scale_y_continuous(labels = unit_format(unit = "K", scale = 1e-3, sep = "")) +
xlab("Age groups") + ylab("Beneficiaries") +
theme(axis.text = element_text(size = 10))
# reference df for the table and text below, restructuring enrollment data from cen_ref
matric_ben <- cen_ref %>%
select(matricula_2017_educacion_inicial, matricula_2017_educacion_primaria,
matricula_2017_educacion_media) %>%
rename("3-6" = matricula_2017_educacion_inicial,
"7-12" = matricula_2017_educacion_primaria,
"12-17" = matricula_2017_educacion_media) %>%
pivot_longer(everything(), names_to = "age_ben", values_to = "matricula2017",
values_drop_na = TRUE) %>%
group_by(age_ben) %>%
summarise(enrolment2017 = sum(matricula2017)) %>%
left_join(age_u_ben) %>%
mutate(percent_total = beneficiarios/enrolment2017 * 100) %>%
relocate(beneficiarios, .after = age_ben) %>%
rename(`Age group` = age_ben,
beneficiaries = beneficiarios) %>%
slice(2,3,1)  # rearranging rows
sum(matric_ben$beneficiaries)/(sum(u_ben2$beneficiarios))*100
